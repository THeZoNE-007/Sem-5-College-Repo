int main()
{
   int arr[] = {8,18,28,38,48};
   int *p;
   p = &arr[1];
   ++p;
   ++*p;
   --p;
   --*p;
   printf("%d%d%d%d%d" ,arr[0],arr[1],arr[2],arr[3],arr[4]);
   printf("%d%d%d%d%d" ,*p,*(p-1),*(p-2),*(p-2));
   return 0;
} 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
int arr[] = {7,17,27,37,47};
int *p;
p = arr+2;
++p;
++*p;
--p;
--*p;
printf("%d%d%d", p[0],p[1],p[-1]);

return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
int arr[] = {6,16,26,36,46};
int *p;
p = arr+2;
--p;
++*p;
++p;
--*p;
printf("%d %d %d %d", arr[3], 3[arr], *(arr+3), *(3+arr));

return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
int arr[] = {5,15,25,35,45};
int *p;
p = arr+1;
++p;
++*p;
--p;
--*p;
printf("%d %d %d", ++*p, *p++, *++p); //evaluation done from R to L in printf for multiple expressions !!

return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
int arr[] = {4,14,24,34,44};
int *p;
p = arr+4;
--p;
--*p;
printf("%d %d %d", --*p, *p--, *--p); 

return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q : Write a function multiplyByFactor that multiplies the value at the given address by a specified factor.
input : arr[10]= {1,2,3,4,5,6,7,8,9,10}
multiplication factor = 2
output : arr[10] = {2,4,6,8,10,12,14,16,18,20}

Code :

#include <stdio.h>

void multiplyByFactor(int *arr, int size, int factor) {
    for (int i = 0; i < size; i++) {
        arr[i] *= factor;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int size = sizeof(arr) / sizeof(arr[0]);
    int factor = 2;

    printf("Original array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    multiplyByFactor(arr, size, factor); 

    printf("Array after multiplication: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q : Write a function to reverse the elements of an array.
Input : arr[10]= {1,2,3,4,5,6,7,8,9,10}
Output : arr[10]= {10,9,8,7,6,5,4,3,2,1}

Code:
#include <stdio.h>

void reverse(int *arr, int size) {
    for (int i = 0; i < size / 2; i++) {
        int temp = arr[i];
        arr[i] = arr[size - 1 - i];
        arr[size - 1 - i] = temp;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    
    reverse(arr, size);

    printf("Reversed array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Two Dimensional Array:

The simplest form of multidimensional array is the two-dimensional array. A two-dimensional array is, in essence, a list of one-dimensional arrays.

To declare a two-dimensional integer array of size[x][y], you would write something as follows:

type arrayName[x][y];
where type can be any valid C data type and arrayName will be a valid C identifier

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q : Write a function that rotate a 2D array by 90 degrees (Clockwise)

Code:
#include <stdio.h>

#define N 5

void rotate90DegreesClockwise(int matrix[N][N]) {
    
    for (int i = 0; i < N; i++) {
        for (int j = i; j < N; j++) {
            
            int temp = matrix[i][j];
            matrix[i][j] = matrix[j][i];
            matrix[j][i] = temp;
        }
    }

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N / 2; j++) {
            
            int temp = matrix[i][j];
            matrix[i][j] = matrix[i][N - j - 1];
            matrix[i][N - j - 1] = temp;
        }
    }
}

void printMatrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix[N][N] = {
        {1, 2, 3, 4, 5},
        {6, 7, 8, 9, 10},
        {11, 12, 13, 14, 15},
        {16, 17, 18, 19, 20},
        {21, 22, 23, 24, 25}
    };

    printf("Original Matrix:\n");
    printMatrix(matrix);

    rotate90DegreesClockwise(matrix);

    printf("\nRotated Matrix:\n");
    printMatrix(matrix);

    return 0;
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
