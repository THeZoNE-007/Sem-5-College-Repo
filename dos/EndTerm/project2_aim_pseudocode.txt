--------< AIM >--------

### Program Aim:
- Simulate resource allocation to keep the system in a **safe state** and prevent deadlock.

----< PSEUDOCODE >----

### Need Matrix Calculation:
- Calculate the "need" matrix by subtracting allocated resources from maximum requested resources for each process.

### Safety Check:
- The `isSafe` function checks if the system is safe:
  - Finds a sequence of processes that can execute with available resources.
  - If all processes can execute without exceeding resources, the system is safe; otherwise, it is not.

### Algorithm Flow:
- Check if each process's remaining resource needs can be met by available resources.
- Mark processes as "finished" and update available resources when their needs are satisfied.

### Output:
- Indicate if the system is in a safe state.
- If safe, display the **safe sequence** of processes.

### Structure:
1. **calculateNeed**: Computes the "need" matrix.
2. **isSafe**: Checks safety and displays the safe sequence if applicable.
3. **main**: Initializes process data and calls `isSafe`.

### Example:
- Uses predefined values for 5 processes and 4 resources, with set maximum demands (`max[][]`), allocated resources (`allot[][]`), and available resources (`avail[]`).
